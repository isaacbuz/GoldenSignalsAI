{"ast":null,"code":"var _jsxFileName = \"/Users/isaacbuz/Documents/Projects/GoldenSignalsAI/presentation/frontend/src/Login.js\",\n  _s = $RefreshSig$();\n// Login.js\n// Purpose: Provides the login form and authentication logic for GoldenSignalsAI users and admins. Handles user input, form submission, and feedback for failed login attempts. Integrates with backend or Firebase for authentication.\n\n// Import necessary dependencies\nimport React, { useState } from \"react\";\nimport { auth, googleProvider, githubProvider } from \"./firebase\";\nimport { signInWithEmailAndPassword, signInWithPopup } from \"firebase/auth\";\nimport \"./Login.css\";\n\n// Define the Login component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Login({\n  onLogin\n}) {\n  _s();\n  // State for email and password input\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  // State for error messages\n  const [error, setError] = useState(\"\");\n\n  // Handle login form submission\n  const handleEmailLogin = e => {\n    // Prevent default form submission behavior\n    e.preventDefault();\n    // Call Firebase's signInWithEmailAndPassword function to authenticate user\n    signInWithEmailAndPassword(auth, email, password).then(userCredential => {\n      // Call the onLogin callback function with the authenticated user\n      onLogin(userCredential.user);\n    }).catch(err => {\n      // Set error message if authentication fails\n      setError(err.message);\n    });\n  };\n\n  // Handle Google login button click\n  const handleGoogleLogin = () => {\n    // Call Firebase's signInWithPopup function to authenticate user with Google\n    signInWithPopup(auth, googleProvider).then(result => {\n      // Call the onLogin callback function with the authenticated user\n      onLogin(result.user);\n    }).catch(err => {\n      // Set error message if authentication fails\n      setError(err.message);\n    });\n  };\n\n  // Handle GitHub login button click\n  const handleGithubLogin = () => {\n    // Call Firebase's signInWithPopup function to authenticate user with GitHub\n    signInWithPopup(auth, githubProvider).then(result => {\n      // Call the onLogin callback function with the authenticated user\n      onLogin(result.user);\n    }).catch(err => {\n      // Set error message if authentication fails\n      setError(err.message);\n    });\n  };\n\n  // Render login form UI\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login-panel\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Admin Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleEmailLogin,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        placeholder: \"Email\",\n        value: email,\n        onChange: e => setEmail(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        placeholder: \"Password\",\n        value: password,\n        onChange: e => setPassword(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"oauth-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleGoogleLogin,\n        children: \"Sign in with Google\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleGithubLogin,\n        children: \"Sign in with GitHub\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n_s(Login, \"/oUdbphBttpIcUsa7P1v1069QkA=\");\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","auth","googleProvider","githubProvider","signInWithEmailAndPassword","signInWithPopup","jsxDEV","_jsxDEV","Login","onLogin","_s","email","setEmail","password","setPassword","error","setError","handleEmailLogin","e","preventDefault","then","userCredential","user","catch","err","message","handleGoogleLogin","result","handleGithubLogin","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","value","onChange","target","required","onClick","_c","$RefreshReg$"],"sources":["/Users/isaacbuz/Documents/Projects/GoldenSignalsAI/presentation/frontend/src/Login.js"],"sourcesContent":["// Login.js\n// Purpose: Provides the login form and authentication logic for GoldenSignalsAI users and admins. Handles user input, form submission, and feedback for failed login attempts. Integrates with backend or Firebase for authentication.\n\n// Import necessary dependencies\nimport React, { useState } from \"react\";\nimport { auth, googleProvider, githubProvider } from \"./firebase\";\nimport { signInWithEmailAndPassword, signInWithPopup } from \"firebase/auth\";\nimport \"./Login.css\";\n\n// Define the Login component\nfunction Login({ onLogin }) {\n  // State for email and password input\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  // State for error messages\n  const [error, setError] = useState(\"\");\n\n  // Handle login form submission\n  const handleEmailLogin = (e) => {\n    // Prevent default form submission behavior\n    e.preventDefault();\n    // Call Firebase's signInWithEmailAndPassword function to authenticate user\n    signInWithEmailAndPassword(auth, email, password)\n      .then((userCredential) => {\n        // Call the onLogin callback function with the authenticated user\n        onLogin(userCredential.user);\n      })\n      .catch((err) => {\n        // Set error message if authentication fails\n        setError(err.message);\n      });\n  };\n\n  // Handle Google login button click\n  const handleGoogleLogin = () => {\n    // Call Firebase's signInWithPopup function to authenticate user with Google\n    signInWithPopup(auth, googleProvider)\n      .then((result) => {\n        // Call the onLogin callback function with the authenticated user\n        onLogin(result.user);\n      })\n      .catch((err) => {\n        // Set error message if authentication fails\n        setError(err.message);\n      });\n  };\n\n  // Handle GitHub login button click\n  const handleGithubLogin = () => {\n    // Call Firebase's signInWithPopup function to authenticate user with GitHub\n    signInWithPopup(auth, githubProvider)\n      .then((result) => {\n        // Call the onLogin callback function with the authenticated user\n        onLogin(result.user);\n      })\n      .catch((err) => {\n        // Set error message if authentication fails\n        setError(err.message);\n      });\n  };\n\n  // Render login form UI\n  return (\n    <div className=\"login-panel\">\n      <h2>Admin Login</h2>\n      <form onSubmit={handleEmailLogin}>\n        <input\n          type=\"email\"\n          placeholder=\"Email\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n          required\n        />\n        <input\n          type=\"password\"\n          placeholder=\"Password\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n          required\n        />\n        <button type=\"submit\">Login</button>\n      </form>\n      <div className=\"oauth-buttons\">\n        <button onClick={handleGoogleLogin}>Sign in with Google</button>\n        <button onClick={handleGithubLogin}>Sign in with GitHub</button>\n      </div>\n      {error && <p className=\"error\">{error}</p>}\n    </div>\n  );\n}\n\nexport default Login;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}