{"ast":null,"code":"var _jsxFileName = \"/Users/isaacbuz/Documents/Projects/GoldenSignalsAI/presentation/frontend/src/AdminAlerts.js\",\n  _s = $RefreshSig$();\n// AdminAlerts.js\n// Purpose: Displays real-time system and agent alerts for GoldenSignalsAI administrators. Aggregates and presents alerts based on agent health, queue status, and anomaly detection. Polls backend endpoints for up-to-date alerts and allows editing of alert thresholds. Designed to keep admins aware of critical issues and system health.\n\nimport React, { useEffect, useState } from \"react\";\nimport \"./AdminPanel.css\";\n\n// Generate alerts based on agent health data\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction getAgentAlerts(health) {\n  const alerts = [];\n  Object.entries(health).forEach(([name, info]) => {\n    if (info.status !== \"active\") {\n      alerts.push({\n        type: \"danger\",\n        message: `Agent ${name} is ${info.status}`\n      });\n    } else if (info.error_rate > 0.05) {\n      alerts.push({\n        type: \"warning\",\n        message: `Agent ${name} has high error rate (${(info.error_rate * 100).toFixed(2)}%)`\n      });\n    }\n  });\n  return alerts;\n}\n\n// Generate alerts based on queue status\nfunction getQueueAlerts(queue) {\n  const alerts = [];\n  if (queue && queue.depth > 10) {\n    alerts.push({\n      type: \"warning\",\n      message: `Queue depth is high (${queue.depth})`\n    });\n  }\n  if (queue && queue.active < 1) {\n    alerts.push({\n      type: \"danger\",\n      message: `No active workers!`\n    });\n  }\n  return alerts;\n}\nfunction AdminAlerts() {\n  _s();\n  // State for agent health, queue status, and alert messages\n  const [health, setHealth] = useState({});\n  const [queue, setQueue] = useState(null);\n  const [alerts, setAlerts] = useState([]);\n  // State for alert thresholds and anomaly alerts\n  const [thresholds, setThresholds] = useState({});\n  const [anomalyAlerts, setAnomalyAlerts] = useState([]);\n  const [editing, setEditing] = useState(false);\n  const [saveMsg, setSaveMsg] = useState(\"\");\n\n  // Poll agent health and queue status every 5 seconds\n  useEffect(() => {\n    function fetchData() {\n      fetch(`${API_URL}/api/admin/agents/health`).then(res => res.json()).then(setHealth);\n      fetch(`${API_URL}/api/admin/queue`).then(res => res.json()).then(setQueue);\n    }\n    fetchData();\n    const interval = setInterval(fetchData, 5000);\n    return () => clearInterval(interval);\n  }, []);\n\n  // Fetch alert thresholds once on mount\n  useEffect(() => {\n    fetch(`${API_URL}/api/admin/alert_thresholds`).then(res => res.json()).then(setThresholds);\n  }, []);\n\n  // Poll anomaly alerts every 10 seconds\n  useEffect(() => {\n    let mounted = true;\n    const fetchAnomalyAlerts = () => {\n      fetch(`${API_URL}/api/admin/anomaly_check`).then(res => res.json()).then(data => {\n        if (mounted && data && data.alerts) setAnomalyAlerts(data.alerts);\n      }).catch(() => {});\n    };\n    fetchAnomalyAlerts();\n    const interval = setInterval(fetchAnomalyAlerts, 10000);\n    return () => {\n      mounted = false;\n      clearInterval(interval);\n    };\n  }, []);\n\n  // Aggregate all alerts into a single array for display\n  useEffect(() => {\n    const agentAlerts = getAgentAlerts(health);\n    const queueAlerts = getQueueAlerts(queue);\n    setAlerts([...anomalyAlerts, ...agentAlerts, ...queueAlerts]);\n  }, [health, queue, anomalyAlerts]);\n\n  // Handlers for editing and saving alert thresholds\n  const handleEdit = () => setEditing(true);\n  const handleChange = (k, v) => setThresholds({\n    ...thresholds,\n    [k]: v\n  });\n  const handleSave = async () => {\n    setSaveMsg(\"\");\n    await fetch(`${API_URL}/api/admin/alert_thresholds`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(thresholds)\n    });\n    setEditing(false);\n    setSaveMsg(\"Thresholds updated.\");\n  };\n\n  // If no alerts, render nothing\n  if (!alerts.length) return null;\n\n  // Render all current alerts as styled boxes\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"admin-alerts\",\n    children: alerts.map((alert, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `alert alert-${alert.type || \"warning\"}`,\n      style: {\n        background: (alert.type || \"warning\") === \"danger\" ? \"#ff5252\" : \"#f8b400\",\n        color: \"#fff\",\n        margin: \"1rem 0\",\n        padding: \"1rem\",\n        borderRadius: \"8px\",\n        fontWeight: \"bold\",\n        boxShadow: \"0 2px 8px rgba(0,0,0,0.1)\"\n      },\n      children: alert.message\n    }, idx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n}\n_s(AdminAlerts, \"ZrcNXk0KqPo39e0ZUa6/nXEJP2o=\");\n_c = AdminAlerts;\nexport default AdminAlerts;\nvar _c;\n$RefreshReg$(_c, \"AdminAlerts\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","getAgentAlerts","health","alerts","Object","entries","forEach","name","info","status","push","type","message","error_rate","toFixed","getQueueAlerts","queue","depth","active","AdminAlerts","_s","setHealth","setQueue","setAlerts","thresholds","setThresholds","anomalyAlerts","setAnomalyAlerts","editing","setEditing","saveMsg","setSaveMsg","fetchData","fetch","API_URL","then","res","json","interval","setInterval","clearInterval","mounted","fetchAnomalyAlerts","data","catch","agentAlerts","queueAlerts","handleEdit","handleChange","k","v","handleSave","method","headers","body","JSON","stringify","length","className","children","map","alert","idx","style","background","color","margin","padding","borderRadius","fontWeight","boxShadow","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/isaacbuz/Documents/Projects/GoldenSignalsAI/presentation/frontend/src/AdminAlerts.js"],"sourcesContent":["// AdminAlerts.js\n// Purpose: Displays real-time system and agent alerts for GoldenSignalsAI administrators. Aggregates and presents alerts based on agent health, queue status, and anomaly detection. Polls backend endpoints for up-to-date alerts and allows editing of alert thresholds. Designed to keep admins aware of critical issues and system health.\n\nimport React, { useEffect, useState } from \"react\";\nimport \"./AdminPanel.css\";\n\n// Generate alerts based on agent health data\nfunction getAgentAlerts(health) {\n  const alerts = [];\n  Object.entries(health).forEach(([name, info]) => {\n    if (info.status !== \"active\") {\n      alerts.push({\n        type: \"danger\",\n        message: `Agent ${name} is ${info.status}`,\n      });\n    } else if (info.error_rate > 0.05) {\n      alerts.push({\n        type: \"warning\",\n        message: `Agent ${name} has high error rate (${(info.error_rate * 100).toFixed(2)}%)`,\n      });\n    }\n  });\n  return alerts;\n}\n\n// Generate alerts based on queue status\nfunction getQueueAlerts(queue) {\n  const alerts = [];\n  if (queue && queue.depth > 10) {\n    alerts.push({\n      type: \"warning\",\n      message: `Queue depth is high (${queue.depth})`,\n    });\n  }\n  if (queue && queue.active < 1) {\n    alerts.push({\n      type: \"danger\",\n      message: `No active workers!`,\n    });\n  }\n  return alerts;\n}\n\nfunction AdminAlerts() {\n  // State for agent health, queue status, and alert messages\n  const [health, setHealth] = useState({});\n  const [queue, setQueue] = useState(null);\n  const [alerts, setAlerts] = useState([]);\n  // State for alert thresholds and anomaly alerts\n  const [thresholds, setThresholds] = useState({});\n  const [anomalyAlerts, setAnomalyAlerts] = useState([]);\n  const [editing, setEditing] = useState(false);\n  const [saveMsg, setSaveMsg] = useState(\"\");\n\n  // Poll agent health and queue status every 5 seconds\n  useEffect(() => {\n    function fetchData() {\n      fetch(`${API_URL}/api/admin/agents/health`)\n        .then((res) => res.json())\n        .then(setHealth);\n      fetch(`${API_URL}/api/admin/queue`)\n        .then((res) => res.json())\n        .then(setQueue);\n    }\n    fetchData();\n    const interval = setInterval(fetchData, 5000);\n    return () => clearInterval(interval);\n  }, []);\n\n  // Fetch alert thresholds once on mount\n  useEffect(() => {\n    fetch(`${API_URL}/api/admin/alert_thresholds`)\n      .then(res => res.json())\n      .then(setThresholds);\n  }, []);\n\n  // Poll anomaly alerts every 10 seconds\n  useEffect(() => {\n    let mounted = true;\n    const fetchAnomalyAlerts = () => {\n      fetch(`${API_URL}/api/admin/anomaly_check`)\n        .then((res) => res.json())\n        .then((data) => {\n          if (mounted && data && data.alerts) setAnomalyAlerts(data.alerts);\n        })\n        .catch(() => {});\n    };\n    fetchAnomalyAlerts();\n    const interval = setInterval(fetchAnomalyAlerts, 10000);\n    return () => { mounted = false; clearInterval(interval); };\n  }, []);\n\n  // Aggregate all alerts into a single array for display\n  useEffect(() => {\n    const agentAlerts = getAgentAlerts(health);\n    const queueAlerts = getQueueAlerts(queue);\n    setAlerts([...anomalyAlerts, ...agentAlerts, ...queueAlerts]);\n  }, [health, queue, anomalyAlerts]);\n\n  // Handlers for editing and saving alert thresholds\n  const handleEdit = () => setEditing(true);\n  const handleChange = (k, v) => setThresholds({ ...thresholds, [k]: v });\n  const handleSave = async () => {\n    setSaveMsg(\"\");\n    await fetch(`${API_URL}/api/admin/alert_thresholds`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(thresholds)\n    });\n    setEditing(false);\n    setSaveMsg(\"Thresholds updated.\");\n  };\n\n  // If no alerts, render nothing\n  if (!alerts.length) return null;\n\n  // Render all current alerts as styled boxes\n  return (\n    <div className=\"admin-alerts\">\n      {alerts.map((alert, idx) => (\n        <div\n          key={idx}\n          className={`alert alert-${alert.type || \"warning\"}`}\n          style={{\n            background: (alert.type || \"warning\") === \"danger\" ? \"#ff5252\" : \"#f8b400\",\n            color: \"#fff\",\n            margin: \"1rem 0\",\n            padding: \"1rem\",\n            borderRadius: \"8px\",\n            fontWeight: \"bold\",\n            boxShadow: \"0 2px 8px rgba(0,0,0,0.1)\",\n          }}\n        >\n          {alert.message}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default AdminAlerts;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}