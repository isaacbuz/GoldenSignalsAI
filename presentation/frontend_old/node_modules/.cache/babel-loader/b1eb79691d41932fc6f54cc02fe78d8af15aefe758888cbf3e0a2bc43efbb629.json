{"ast":null,"code":"// AdminCharts.js\n// Purpose: Visualizes system performance metrics (CPU usage, memory usage, uptime, and active requests) for GoldenSignalsAI administrators. Fetches historical performance data from the backend and displays it using Chart.js. Charts are updated every minute for near real-time monitoring and capacity planning.\nimport API_URL from'./config';import React,{useEffect,useState}from'react';import{Line}from\"react-chartjs-2\";import{Chart as ChartJS,CategoryScale,LinearScale,PointElement,LineElement,Title,Tooltip,Legend}from\"chart.js\";// Register Chart.js components\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";ChartJS.register(CategoryScale,LinearScale,PointElement,LineElement,Title,Tooltip,Legend);// AdminCharts component\nfunction AdminCharts(){// State to store historical performance data\nconst[history,setHistory]=useState([]);// Fetch historical performance data and update charts every minute\nuseEffect(()=>{// Fetch initial data\nfetch(\"\".concat(API_URL,\"/api/admin/performance/history\")).then(res=>res.json()).then(setHistory);// Set up polling to update charts every minute\nconst interval=setInterval(()=>{fetch(\"\".concat(API_URL,\"/api/admin/performance/history\")).then(res=>res.json()).then(setHistory);},60000);// update every minute\n// Clean up interval on unmount\nreturn()=>clearInterval(interval);},[]);// If no data, display loading message\nif(!history.length)return/*#__PURE__*/_jsx(\"p\",{children:\"Loading charts...\"});// Extract labels from historical data\nconst labels=history.map(h=>new Date(h.timestamp*1000).toLocaleTimeString());// CPU Usage Chart data\nconst cpuData={labels,datasets:[{label:\"CPU Usage (%)\",data:history.map(h=>h.cpu),borderColor:\"#6be6c1\",backgroundColor:\"rgba(107,230,193,0.2)\",tension:0.3}]};// Memory Usage Chart data\nconst memData={labels,datasets:[{label:\"Memory Usage (MB)\",data:history.map(h=>h.memory),borderColor:\"#f8b400\",backgroundColor:\"rgba(248,180,0,0.2)\",tension:0.3}]};// Uptime Chart data\nconst uptimeData={labels,datasets:[{label:\"Uptime (s)\",data:history.map(h=>h.uptime),borderColor:\"#4fc3a1\",backgroundColor:\"rgba(79,195,161,0.2)\",tension:0.3}]};// Render three charts for CPU, memory, and uptime\nreturn/*#__PURE__*/_jsxs(\"div\",{className:\"admin-charts\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Performance Trends\"}),/*#__PURE__*/_jsxs(\"div\",{style:{display:\"flex\",gap:\"2rem\",flexWrap:\"wrap\"},children:[/*#__PURE__*/_jsx(\"div\",{style:{width:320},children:/*#__PURE__*/_jsx(Line,{data:cpuData,options:{plugins:{legend:{display:false}}}})}),/*#__PURE__*/_jsx(\"div\",{style:{width:320},children:/*#__PURE__*/_jsx(Line,{data:memData,options:{plugins:{legend:{display:false}}}})}),/*#__PURE__*/_jsx(\"div\",{style:{width:320},children:/*#__PURE__*/_jsx(Line,{data:uptimeData,options:{plugins:{legend:{display:false}}}})})]})]});}export default AdminCharts;","map":{"version":3,"names":["API_URL","React","useEffect","useState","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","jsx","_jsx","jsxs","_jsxs","register","AdminCharts","history","setHistory","fetch","concat","then","res","json","interval","setInterval","clearInterval","length","children","labels","map","h","Date","timestamp","toLocaleTimeString","cpuData","datasets","label","data","cpu","borderColor","backgroundColor","tension","memData","memory","uptimeData","uptime","className","style","display","gap","flexWrap","width","options","plugins","legend"],"sources":["/Users/isaacbuz/Documents/Projects/GoldenSignalsAI/presentation/frontend/src/AdminCharts.js"],"sourcesContent":["// AdminCharts.js\n// Purpose: Visualizes system performance metrics (CPU usage, memory usage, uptime, and active requests) for GoldenSignalsAI administrators. Fetches historical performance data from the backend and displays it using Chart.js. Charts are updated every minute for near real-time monitoring and capacity planning.\n\nimport API_URL from './config';\nimport React, { useEffect, useState } from 'react';\nimport { Line } from \"react-chartjs-2\";\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n} from \"chart.js\";\n\n// Register Chart.js components\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\n// AdminCharts component\nfunction AdminCharts() {\n  // State to store historical performance data\n  const [history, setHistory] = useState([]);\n\n  // Fetch historical performance data and update charts every minute\n  useEffect(() => {\n    // Fetch initial data\n    fetch(`${API_URL}/api/admin/performance/history`)\n      .then((res) => res.json())\n      .then(setHistory);\n\n    // Set up polling to update charts every minute\n    const interval = setInterval(() => {\n      fetch(`${API_URL}/api/admin/performance/history`)\n        .then((res) => res.json())\n        .then(setHistory);\n    }, 60000); // update every minute\n\n    // Clean up interval on unmount\n    return () => clearInterval(interval);\n  }, []);\n\n  // If no data, display loading message\n  if (!history.length) return <p>Loading charts...</p>;\n\n  // Extract labels from historical data\n  const labels = history.map((h) => new Date(h.timestamp * 1000).toLocaleTimeString());\n\n  // CPU Usage Chart data\n  const cpuData = {\n    labels,\n    datasets: [\n      {\n        label: \"CPU Usage (%)\",\n        data: history.map((h) => h.cpu),\n        borderColor: \"#6be6c1\",\n        backgroundColor: \"rgba(107,230,193,0.2)\",\n        tension: 0.3,\n      },\n    ],\n  };\n\n  // Memory Usage Chart data\n  const memData = {\n    labels,\n    datasets: [\n      {\n        label: \"Memory Usage (MB)\",\n        data: history.map((h) => h.memory),\n        borderColor: \"#f8b400\",\n        backgroundColor: \"rgba(248,180,0,0.2)\",\n        tension: 0.3,\n      },\n    ],\n  };\n\n  // Uptime Chart data\n  const uptimeData = {\n    labels,\n    datasets: [\n      {\n        label: \"Uptime (s)\",\n        data: history.map((h) => h.uptime),\n        borderColor: \"#4fc3a1\",\n        backgroundColor: \"rgba(79,195,161,0.2)\",\n        tension: 0.3,\n      },\n    ],\n  };\n\n  // Render three charts for CPU, memory, and uptime\n  return (\n    <div className=\"admin-charts\">\n      <h4>Performance Trends</h4>\n      <div style={{ display: \"flex\", gap: \"2rem\", flexWrap: \"wrap\" }}>\n        <div style={{ width: 320 }}>\n          <Line data={cpuData} options={{ plugins: { legend: { display: false } } }} />\n        </div>\n        <div style={{ width: 320 }}>\n          <Line data={memData} options={{ plugins: { legend: { display: false } } }} />\n        </div>\n        <div style={{ width: 320 }}>\n          <Line data={uptimeData} options={{ plugins: { legend: { display: false } } }} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default AdminCharts;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}