{"ast":null,"code":"// Login.js\n// Purpose: Provides the login form and authentication logic for GoldenSignalsAI users and admins. Handles user input, form submission, and feedback for failed login attempts. Integrates with backend or Firebase for authentication.\n// Import necessary dependencies\nimport React,{useState}from\"react\";import{auth,googleProvider,githubProvider}from\"./firebase\";import{signInWithEmailAndPassword,signInWithPopup}from\"firebase/auth\";import\"./Login.css\";// Define the Login component\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function Login(_ref){let{onLogin}=_ref;// State for email and password input\nconst[email,setEmail]=useState(\"\");const[password,setPassword]=useState(\"\");// State for error messages\nconst[error,setError]=useState(\"\");// Handle login form submission\nconst handleEmailLogin=e=>{// Prevent default form submission behavior\ne.preventDefault();// Call Firebase's signInWithEmailAndPassword function to authenticate user\nsignInWithEmailAndPassword(auth,email,password).then(userCredential=>{// Call the onLogin callback function with the authenticated user\nonLogin(userCredential.user);}).catch(err=>{// Set error message if authentication fails\nsetError(err.message);});};// Handle Google login button click\nconst handleGoogleLogin=()=>{// Call Firebase's signInWithPopup function to authenticate user with Google\nsignInWithPopup(auth,googleProvider).then(result=>{// Call the onLogin callback function with the authenticated user\nonLogin(result.user);}).catch(err=>{// Set error message if authentication fails\nsetError(err.message);});};// Handle GitHub login button click\nconst handleGithubLogin=()=>{// Call Firebase's signInWithPopup function to authenticate user with GitHub\nsignInWithPopup(auth,githubProvider).then(result=>{// Call the onLogin callback function with the authenticated user\nonLogin(result.user);}).catch(err=>{// Set error message if authentication fails\nsetError(err.message);});};// Render login form UI\nreturn/*#__PURE__*/_jsxs(\"div\",{className:\"login-panel\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Admin Login\"}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleEmailLogin,children:[/*#__PURE__*/_jsx(\"input\",{type:\"email\",placeholder:\"Email\",value:email,onChange:e=>setEmail(e.target.value),required:true}),/*#__PURE__*/_jsx(\"input\",{type:\"password\",placeholder:\"Password\",value:password,onChange:e=>setPassword(e.target.value),required:true}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",children:\"Login\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"oauth-buttons\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:handleGoogleLogin,children:\"Sign in with Google\"}),/*#__PURE__*/_jsx(\"button\",{onClick:handleGithubLogin,children:\"Sign in with GitHub\"})]}),error&&/*#__PURE__*/_jsx(\"p\",{className:\"error\",children:error})]});}export default Login;","map":{"version":3,"names":["React","useState","auth","googleProvider","githubProvider","signInWithEmailAndPassword","signInWithPopup","jsx","_jsx","jsxs","_jsxs","Login","_ref","onLogin","email","setEmail","password","setPassword","error","setError","handleEmailLogin","e","preventDefault","then","userCredential","user","catch","err","message","handleGoogleLogin","result","handleGithubLogin","className","children","onSubmit","type","placeholder","value","onChange","target","required","onClick"],"sources":["/Users/isaacbuz/Documents/Projects/GoldenSignalsAI/presentation/frontend/src/Login.js"],"sourcesContent":["// Login.js\n// Purpose: Provides the login form and authentication logic for GoldenSignalsAI users and admins. Handles user input, form submission, and feedback for failed login attempts. Integrates with backend or Firebase for authentication.\n\n// Import necessary dependencies\nimport React, { useState } from \"react\";\nimport { auth, googleProvider, githubProvider } from \"./firebase\";\nimport { signInWithEmailAndPassword, signInWithPopup } from \"firebase/auth\";\nimport \"./Login.css\";\n\n// Define the Login component\nfunction Login({ onLogin }) {\n  // State for email and password input\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  // State for error messages\n  const [error, setError] = useState(\"\");\n\n  // Handle login form submission\n  const handleEmailLogin = (e) => {\n    // Prevent default form submission behavior\n    e.preventDefault();\n    // Call Firebase's signInWithEmailAndPassword function to authenticate user\n    signInWithEmailAndPassword(auth, email, password)\n      .then((userCredential) => {\n        // Call the onLogin callback function with the authenticated user\n        onLogin(userCredential.user);\n      })\n      .catch((err) => {\n        // Set error message if authentication fails\n        setError(err.message);\n      });\n  };\n\n  // Handle Google login button click\n  const handleGoogleLogin = () => {\n    // Call Firebase's signInWithPopup function to authenticate user with Google\n    signInWithPopup(auth, googleProvider)\n      .then((result) => {\n        // Call the onLogin callback function with the authenticated user\n        onLogin(result.user);\n      })\n      .catch((err) => {\n        // Set error message if authentication fails\n        setError(err.message);\n      });\n  };\n\n  // Handle GitHub login button click\n  const handleGithubLogin = () => {\n    // Call Firebase's signInWithPopup function to authenticate user with GitHub\n    signInWithPopup(auth, githubProvider)\n      .then((result) => {\n        // Call the onLogin callback function with the authenticated user\n        onLogin(result.user);\n      })\n      .catch((err) => {\n        // Set error message if authentication fails\n        setError(err.message);\n      });\n  };\n\n  // Render login form UI\n  return (\n    <div className=\"login-panel\">\n      <h2>Admin Login</h2>\n      <form onSubmit={handleEmailLogin}>\n        <input\n          type=\"email\"\n          placeholder=\"Email\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n          required\n        />\n        <input\n          type=\"password\"\n          placeholder=\"Password\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n          required\n        />\n        <button type=\"submit\">Login</button>\n      </form>\n      <div className=\"oauth-buttons\">\n        <button onClick={handleGoogleLogin}>Sign in with Google</button>\n        <button onClick={handleGithubLogin}>Sign in with GitHub</button>\n      </div>\n      {error && <p className=\"error\">{error}</p>}\n    </div>\n  );\n}\n\nexport default Login;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}