{"ast":null,"code":"import _objectSpread from\"/Users/isaacbuz/Documents/Projects/GoldenSignalsAI/presentation/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// Arbitrage.js\n// Purpose: Displays arbitrage opportunities and allows users to execute trades. Fetches arbitrage data from the backend and manages trade execution state. Designed for user-facing arbitrage discovery and action within GoldenSignalsAI.\nimport React,{useEffect,useState}from'react';import'./Arbitrage.css';import API_URL from'./config';// Arbitrage component: displays arbitrage opportunities and allows users to execute trades\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function Arbitrage(){// State for storing arbitrage opportunities\nconst[opportunities,setOpportunities]=useState([]);// State for tracking loading state\nconst[loading,setLoading]=useState(true);// State for tracking trade execution status\nconst[tradeStatus,setTradeStatus]=useState(\"\");const[symbol,setSymbol]=useState('AAPL');// Optionally, add error state for invalid ticker\nconst[tickerError,setTickerError]=useState(\"\");const[executing,setExecuting]=useState(false);const[message,setMessage]=useState('');// Fetch arbitrage opportunities from backend\nconst fetchOpportunities=async()=>{if(tickerError)return;// Send POST request to backend with symbol and min spread\nconst res=await fetch(\"\".concat(API_URL,\"/arbitrage/opportunities\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({symbol,min_spread:0.01})});// Parse response data and update opportunities state\nconst data=await res.json();setOpportunities(data);};// Execute arbitrage trade for all opportunities\nconst executeArbitrage=async()=>{if(tickerError)return;// Set executing state to true and clear message\nsetExecuting(true);setMessage('');// Send POST request to backend with symbol and min spread\nconst res=await fetch(\"\".concat(API_URL,\"/arbitrage/execute\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({symbol,min_spread:0.01})});// Parse response data and update message state\nconst data=await res.json();setMessage(\"Executed \".concat(data.executed,\" out of \").concat(data.total,\" opportunities.\"));// Set executing state to false and refetch opportunities\nsetExecuting(false);fetchOpportunities();};// Fetch arbitrage opportunities on mount and every 15 seconds\nuseEffect(()=>{fetchOpportunities();const interval=setInterval(fetchOpportunities,15000);return()=>clearInterval(interval);},[symbol]);return/*#__PURE__*/_jsxs(\"div\",{className:\"arbitrage-container\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"AI Arbitrage Opportunities\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"arbitrage-controls\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"ticker-input\",children:\"Symbol: \"}),/*#__PURE__*/_jsx(\"input\",{id:\"ticker-input\",type:\"text\",value:symbol,onChange:async e=>{const newSymbol=e.target.value.toUpperCase();setSymbol(newSymbol);setTickerError(\"\");if(newSymbol&&newSymbol.length>=1){try{const jwt=localStorage.getItem('jwt_token');const res=await fetch(\"\".concat(API_URL,\"/api/tickers/validate\"),{method:'POST',headers:_objectSpread({'Content-Type':'application/json'},jwt?{Authorization:\"Bearer \".concat(jwt)}:{}),body:JSON.stringify({symbol:newSymbol})});const data=await res.json();if(!data.valid){setTickerError('Invalid ticker symbol');}else{setTickerError(\"\");}}catch(err){setTickerError('Validation failed');}}else{setTickerError(\"\");}},placeholder:\"Enter stock ticker (e.g. AAPL)\",style:{width:120,marginRight:8,padding:4,borderRadius:4,border:'1px solid #333'}}),tickerError&&/*#__PURE__*/_jsx(\"span\",{style:{color:'red',marginLeft:8},children:tickerError}),/*#__PURE__*/_jsx(\"button\",{onClick:fetchOpportunities,disabled:!!tickerError,children:\"Refresh\"}),/*#__PURE__*/_jsx(\"button\",{onClick:executeArbitrage,disabled:executing||!!tickerError,className:\"execute-btn\",children:executing?'Executing...':'Execute All'})]}),message&&/*#__PURE__*/_jsx(\"div\",{className:\"arbitrage-message\",children:message}),/*#__PURE__*/_jsxs(\"table\",{className:\"arbitrage-table\",children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:\"Symbol\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Buy Venue\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Sell Venue\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Buy Price\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Sell Price\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Spread\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Status\"})]})}),/*#__PURE__*/_jsx(\"tbody\",{children:opportunities.length===0?/*#__PURE__*/_jsx(\"tr\",{children:/*#__PURE__*/_jsx(\"td\",{colSpan:\"7\",children:\"No opportunities found.\"})}):opportunities.map((opp,idx)=>/*#__PURE__*/_jsxs(\"tr\",{className:opp.spread>0.1?'highlight-row':'',children:[/*#__PURE__*/_jsx(\"td\",{children:opp.symbol}),/*#__PURE__*/_jsx(\"td\",{children:opp.buy_venue}),/*#__PURE__*/_jsx(\"td\",{children:opp.sell_venue}),/*#__PURE__*/_jsxs(\"td\",{children:[\"$\",opp.buy_price.toFixed(2)]}),/*#__PURE__*/_jsxs(\"td\",{children:[\"$\",opp.sell_price.toFixed(2)]}),/*#__PURE__*/_jsxs(\"td\",{className:\"spread-cell\",children:[\"$\",opp.spread.toFixed(2)]}),/*#__PURE__*/_jsx(\"td\",{children:opp.status})]},idx))})]})]});}export default Arbitrage;","map":{"version":3,"names":["React","useEffect","useState","API_URL","jsx","_jsx","jsxs","_jsxs","Arbitrage","opportunities","setOpportunities","loading","setLoading","tradeStatus","setTradeStatus","symbol","setSymbol","tickerError","setTickerError","executing","setExecuting","message","setMessage","fetchOpportunities","res","fetch","concat","method","headers","body","JSON","stringify","min_spread","data","json","executeArbitrage","executed","total","interval","setInterval","clearInterval","className","children","htmlFor","id","type","value","onChange","e","newSymbol","target","toUpperCase","length","jwt","localStorage","getItem","_objectSpread","Authorization","valid","err","placeholder","style","width","marginRight","padding","borderRadius","border","color","marginLeft","onClick","disabled","colSpan","map","opp","idx","spread","buy_venue","sell_venue","buy_price","toFixed","sell_price","status"],"sources":["/Users/isaacbuz/Documents/Projects/GoldenSignalsAI/presentation/frontend/src/Arbitrage.js"],"sourcesContent":["// Arbitrage.js\n// Purpose: Displays arbitrage opportunities and allows users to execute trades. Fetches arbitrage data from the backend and manages trade execution state. Designed for user-facing arbitrage discovery and action within GoldenSignalsAI.\n\nimport React, { useEffect, useState } from 'react';\nimport './Arbitrage.css';\nimport API_URL from './config';\n\n// Arbitrage component: displays arbitrage opportunities and allows users to execute trades\nfunction Arbitrage() {\n  // State for storing arbitrage opportunities\n  const [opportunities, setOpportunities] = useState([]);\n  // State for tracking loading state\n  const [loading, setLoading] = useState(true);\n  // State for tracking trade execution status\n  const [tradeStatus, setTradeStatus] = useState(\"\");\n  const [symbol, setSymbol] = useState('AAPL');\n  // Optionally, add error state for invalid ticker\n  const [tickerError, setTickerError] = useState(\"\");\n  const [executing, setExecuting] = useState(false);\n  const [message, setMessage] = useState('');\n\n  // Fetch arbitrage opportunities from backend\n  const fetchOpportunities = async () => {\n    if (tickerError) return;\n    // Send POST request to backend with symbol and min spread\n    const res = await fetch(`${API_URL}/arbitrage/opportunities`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ symbol, min_spread: 0.01 })\n    });\n    // Parse response data and update opportunities state\n    const data = await res.json();\n    setOpportunities(data);\n  };\n\n  // Execute arbitrage trade for all opportunities\n  const executeArbitrage = async () => {\n    if (tickerError) return;\n    // Set executing state to true and clear message\n    setExecuting(true);\n    setMessage('');\n    // Send POST request to backend with symbol and min spread\n    const res = await fetch(`${API_URL}/arbitrage/execute`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ symbol, min_spread: 0.01 })\n    });\n    // Parse response data and update message state\n    const data = await res.json();\n    setMessage(`Executed ${data.executed} out of ${data.total} opportunities.`);\n    // Set executing state to false and refetch opportunities\n    setExecuting(false);\n    fetchOpportunities();\n  };\n\n  // Fetch arbitrage opportunities on mount and every 15 seconds\n  useEffect(() => {\n    fetchOpportunities();\n    const interval = setInterval(fetchOpportunities, 15000);\n    return () => clearInterval(interval);\n  }, [symbol]);\n\n  return (\n    <div className=\"arbitrage-container\">\n      <h2>AI Arbitrage Opportunities</h2>\n      <div className=\"arbitrage-controls\">\n        {/* Material UI TextField for ticker input */}\n        <label htmlFor=\"ticker-input\">Symbol: </label>\n        <input\n          id=\"ticker-input\"\n          type=\"text\"\n          value={symbol}\n          onChange={async (e) => {\n            const newSymbol = e.target.value.toUpperCase();\n            setSymbol(newSymbol);\n            setTickerError(\"\");\n            if (newSymbol && newSymbol.length >= 1) {\n              try {\n                const jwt = localStorage.getItem('jwt_token');\n                const res = await fetch(`${API_URL}/api/tickers/validate`, {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json',\n                    ...(jwt ? { Authorization: `Bearer ${jwt}` } : {})\n                  },\n                  body: JSON.stringify({ symbol: newSymbol })\n                });\n                const data = await res.json();\n                if (!data.valid) {\n                  setTickerError('Invalid ticker symbol');\n                } else {\n                  setTickerError(\"\");\n                }\n              } catch (err) {\n                setTickerError('Validation failed');\n              }\n            } else {\n              setTickerError(\"\");\n            }\n          }}\n          placeholder=\"Enter stock ticker (e.g. AAPL)\"\n          style={{ width: 120, marginRight: 8, padding: 4, borderRadius: 4, border: '1px solid #333' }}\n        />\n        {tickerError && <span style={{ color: 'red', marginLeft: 8 }}>{tickerError}</span>}\n        <button onClick={fetchOpportunities} disabled={!!tickerError}>Refresh</button>\n        <button onClick={executeArbitrage} disabled={executing || !!tickerError} className=\"execute-btn\">\n          {executing ? 'Executing...' : 'Execute All'}\n        </button>\n      </div>\n      {message && <div className=\"arbitrage-message\">{message}</div>}\n      <table className=\"arbitrage-table\">\n        <thead>\n          <tr>\n            <th>Symbol</th>\n            <th>Buy Venue</th>\n            <th>Sell Venue</th>\n            <th>Buy Price</th>\n            <th>Sell Price</th>\n            <th>Spread</th>\n            <th>Status</th>\n          </tr>\n        </thead>\n        <tbody>\n          {opportunities.length === 0 ? (\n            <tr><td colSpan=\"7\">No opportunities found.</td></tr>\n          ) : (\n            opportunities.map((opp, idx) => (\n              <tr key={idx} className={opp.spread > 0.1 ? 'highlight-row' : ''}>\n                <td>{opp.symbol}</td>\n                <td>{opp.buy_venue}</td>\n                <td>{opp.sell_venue}</td>\n                <td>${opp.buy_price.toFixed(2)}</td>\n                <td>${opp.sell_price.toFixed(2)}</td>\n                <td className=\"spread-cell\">${opp.spread.toFixed(2)}</td>\n                <td>{opp.status}</td>\n              </tr>\n            ))\n          )}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default Arbitrage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}