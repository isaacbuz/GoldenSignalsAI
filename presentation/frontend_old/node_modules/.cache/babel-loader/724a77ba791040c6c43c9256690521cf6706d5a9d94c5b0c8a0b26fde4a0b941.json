{"ast":null,"code":"import _objectSpread from\"/Users/isaacbuz/Documents/Projects/GoldenSignalsAI/presentation/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// AdminAlerts.js\n// Purpose: Displays real-time system and agent alerts for GoldenSignalsAI administrators. Aggregates and presents alerts based on agent health, queue status, and anomaly detection. Polls backend endpoints for up-to-date alerts and allows editing of alert thresholds. Designed to keep admins aware of critical issues and system health.\nimport React,{useEffect,useState}from\"react\";import\"./AdminPanel.css\";// Generate alerts based on agent health data\nimport{jsx as _jsx}from\"react/jsx-runtime\";function getAgentAlerts(health){const alerts=[];Object.entries(health).forEach(_ref=>{let[name,info]=_ref;if(info.status!==\"active\"){alerts.push({type:\"danger\",message:\"Agent \".concat(name,\" is \").concat(info.status)});}else if(info.error_rate>0.05){alerts.push({type:\"warning\",message:\"Agent \".concat(name,\" has high error rate (\").concat((info.error_rate*100).toFixed(2),\"%)\")});}});return alerts;}// Generate alerts based on queue status\nfunction getQueueAlerts(queue){const alerts=[];if(queue&&queue.depth>10){alerts.push({type:\"warning\",message:\"Queue depth is high (\".concat(queue.depth,\")\")});}if(queue&&queue.active<1){alerts.push({type:\"danger\",message:\"No active workers!\"});}return alerts;}function AdminAlerts(){// State for agent health, queue status, and alert messages\nconst[health,setHealth]=useState({});const[queue,setQueue]=useState(null);const[alerts,setAlerts]=useState([]);// State for alert thresholds and anomaly alerts\nconst[thresholds,setThresholds]=useState({});const[anomalyAlerts,setAnomalyAlerts]=useState([]);const[editing,setEditing]=useState(false);const[saveMsg,setSaveMsg]=useState(\"\");// Poll agent health and queue status every 5 seconds\nuseEffect(()=>{function fetchData(){fetch(\"/api/admin/agents/health\").then(res=>res.json()).then(setHealth);fetch(\"/api/admin/queue\").then(res=>res.json()).then(setQueue);}fetchData();const interval=setInterval(fetchData,5000);return()=>clearInterval(interval);},[]);// Fetch alert thresholds once on mount\nuseEffect(()=>{fetch(\"/api/admin/alert_thresholds\").then(res=>res.json()).then(setThresholds);},[]);// Poll anomaly alerts every 10 seconds\nuseEffect(()=>{let mounted=true;const fetchAnomalyAlerts=()=>{fetch(\"/api/admin/anomaly_check\").then(res=>res.json()).then(data=>{if(mounted&&data&&data.alerts)setAnomalyAlerts(data.alerts);}).catch(()=>{});};fetchAnomalyAlerts();const interval=setInterval(fetchAnomalyAlerts,10000);return()=>{mounted=false;clearInterval(interval);};},[]);// Aggregate all alerts into a single array for display\nuseEffect(()=>{const agentAlerts=getAgentAlerts(health);const queueAlerts=getQueueAlerts(queue);setAlerts([...anomalyAlerts,...agentAlerts,...queueAlerts]);},[health,queue,anomalyAlerts]);// Handlers for editing and saving alert thresholds\nconst handleEdit=()=>setEditing(true);const handleChange=(k,v)=>setThresholds(_objectSpread(_objectSpread({},thresholds),{},{[k]:v}));const handleSave=async()=>{setSaveMsg(\"\");await fetch(\"/api/admin/alert_thresholds\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify(thresholds)});setEditing(false);setSaveMsg(\"Thresholds updated.\");};// If no alerts, render nothing\nif(!alerts.length)return null;// Render all current alerts as styled boxes\nreturn/*#__PURE__*/_jsx(\"div\",{className:\"admin-alerts\",children:alerts.map((alert,idx)=>/*#__PURE__*/_jsx(\"div\",{className:\"alert alert-\".concat(alert.type||\"warning\"),style:{background:(alert.type||\"warning\")===\"danger\"?\"#ff5252\":\"#f8b400\",color:\"#fff\",margin:\"1rem 0\",padding:\"1rem\",borderRadius:\"8px\",fontWeight:\"bold\",boxShadow:\"0 2px 8px rgba(0,0,0,0.1)\"},children:alert.message},idx))});}export default AdminAlerts;","map":{"version":3,"names":["React","useEffect","useState","jsx","_jsx","getAgentAlerts","health","alerts","Object","entries","forEach","_ref","name","info","status","push","type","message","concat","error_rate","toFixed","getQueueAlerts","queue","depth","active","AdminAlerts","setHealth","setQueue","setAlerts","thresholds","setThresholds","anomalyAlerts","setAnomalyAlerts","editing","setEditing","saveMsg","setSaveMsg","fetchData","fetch","then","res","json","interval","setInterval","clearInterval","mounted","fetchAnomalyAlerts","data","catch","agentAlerts","queueAlerts","handleEdit","handleChange","k","v","_objectSpread","handleSave","method","headers","body","JSON","stringify","length","className","children","map","alert","idx","style","background","color","margin","padding","borderRadius","fontWeight","boxShadow"],"sources":["/Users/isaacbuz/Documents/Projects/GoldenSignalsAI/presentation/frontend/src/AdminAlerts.js"],"sourcesContent":["// AdminAlerts.js\n// Purpose: Displays real-time system and agent alerts for GoldenSignalsAI administrators. Aggregates and presents alerts based on agent health, queue status, and anomaly detection. Polls backend endpoints for up-to-date alerts and allows editing of alert thresholds. Designed to keep admins aware of critical issues and system health.\n\nimport React, { useEffect, useState } from \"react\";\nimport \"./AdminPanel.css\";\n\n// Generate alerts based on agent health data\nfunction getAgentAlerts(health) {\n  const alerts = [];\n  Object.entries(health).forEach(([name, info]) => {\n    if (info.status !== \"active\") {\n      alerts.push({\n        type: \"danger\",\n        message: `Agent ${name} is ${info.status}`,\n      });\n    } else if (info.error_rate > 0.05) {\n      alerts.push({\n        type: \"warning\",\n        message: `Agent ${name} has high error rate (${(info.error_rate * 100).toFixed(2)}%)`,\n      });\n    }\n  });\n  return alerts;\n}\n\n// Generate alerts based on queue status\nfunction getQueueAlerts(queue) {\n  const alerts = [];\n  if (queue && queue.depth > 10) {\n    alerts.push({\n      type: \"warning\",\n      message: `Queue depth is high (${queue.depth})`,\n    });\n  }\n  if (queue && queue.active < 1) {\n    alerts.push({\n      type: \"danger\",\n      message: `No active workers!`,\n    });\n  }\n  return alerts;\n}\n\nfunction AdminAlerts() {\n  // State for agent health, queue status, and alert messages\n  const [health, setHealth] = useState({});\n  const [queue, setQueue] = useState(null);\n  const [alerts, setAlerts] = useState([]);\n  // State for alert thresholds and anomaly alerts\n  const [thresholds, setThresholds] = useState({});\n  const [anomalyAlerts, setAnomalyAlerts] = useState([]);\n  const [editing, setEditing] = useState(false);\n  const [saveMsg, setSaveMsg] = useState(\"\");\n\n  // Poll agent health and queue status every 5 seconds\n  useEffect(() => {\n    function fetchData() {\n      fetch(\"/api/admin/agents/health\")\n        .then((res) => res.json())\n        .then(setHealth);\n      fetch(\"/api/admin/queue\")\n        .then((res) => res.json())\n        .then(setQueue);\n    }\n    fetchData();\n    const interval = setInterval(fetchData, 5000);\n    return () => clearInterval(interval);\n  }, []);\n\n  // Fetch alert thresholds once on mount\n  useEffect(() => {\n    fetch(\"/api/admin/alert_thresholds\")\n      .then(res => res.json())\n      .then(setThresholds);\n  }, []);\n\n  // Poll anomaly alerts every 10 seconds\n  useEffect(() => {\n    let mounted = true;\n    const fetchAnomalyAlerts = () => {\n      fetch(\"/api/admin/anomaly_check\")\n        .then((res) => res.json())\n        .then((data) => {\n          if (mounted && data && data.alerts) setAnomalyAlerts(data.alerts);\n        })\n        .catch(() => {});\n    };\n    fetchAnomalyAlerts();\n    const interval = setInterval(fetchAnomalyAlerts, 10000);\n    return () => { mounted = false; clearInterval(interval); };\n  }, []);\n\n  // Aggregate all alerts into a single array for display\n  useEffect(() => {\n    const agentAlerts = getAgentAlerts(health);\n    const queueAlerts = getQueueAlerts(queue);\n    setAlerts([...anomalyAlerts, ...agentAlerts, ...queueAlerts]);\n  }, [health, queue, anomalyAlerts]);\n\n  // Handlers for editing and saving alert thresholds\n  const handleEdit = () => setEditing(true);\n  const handleChange = (k, v) => setThresholds({ ...thresholds, [k]: v });\n  const handleSave = async () => {\n    setSaveMsg(\"\");\n    await fetch(\"/api/admin/alert_thresholds\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(thresholds)\n    });\n    setEditing(false);\n    setSaveMsg(\"Thresholds updated.\");\n  };\n\n  // If no alerts, render nothing\n  if (!alerts.length) return null;\n\n  // Render all current alerts as styled boxes\n  return (\n    <div className=\"admin-alerts\">\n      {alerts.map((alert, idx) => (\n        <div\n          key={idx}\n          className={`alert alert-${alert.type || \"warning\"}`}\n          style={{\n            background: (alert.type || \"warning\") === \"danger\" ? \"#ff5252\" : \"#f8b400\",\n            color: \"#fff\",\n            margin: \"1rem 0\",\n            padding: \"1rem\",\n            borderRadius: \"8px\",\n            fontWeight: \"bold\",\n            boxShadow: \"0 2px 8px rgba(0,0,0,0.1)\",\n          }}\n        >\n          {alert.message}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default AdminAlerts;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}