{"ast":null,"code":"var _jsxFileName = \"/Users/isaacbuz/Documents/Projects/GoldenSignalsAI/presentation/frontend/src/AdminAgentControls.js\",\n  _s = $RefreshSig$();\n// AdminAgentControls.js\n// Purpose: Provides controls for admin users to manage agents in GoldenSignalsAI. Allows restarting or disabling agents via API calls. Displays action status and feedback messages for each operation.\n\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AdminAgentControls({\n  agentName,\n  onAction\n}) {\n  _s();\n  // State to indicate loading status for async actions\n  const [loading, setLoading] = useState(false);\n  // State for feedback message to display action results\n  const [msg, setMsg] = useState(\"\");\n\n  // Handle admin actions (restart/disable) for the agent\n  const handleAction = async action => {\n    setLoading(true);\n    setMsg(\"\");\n    try {\n      // Send POST request to backend API for the selected action\n      const res = await fetch(`${API_URL}/api/admin/agents/${agentName}/${action}`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      const data = await res.json();\n      setMsg(data.message); // Show feedback message\n      if (onAction) onAction(action, data); // Notify parent if callback provided\n    } catch (e) {\n      setMsg(\"Error performing action\");\n    }\n    setLoading(false);\n  };\n\n  // Render action buttons for restart and disable, and show feedback message\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      margin: \"1rem 0\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleAction(\"restart\"),\n      disabled: loading,\n      style: {\n        marginRight: \"1rem\",\n        background: \"#4fc3a1\",\n        color: \"#fff\",\n        border: \"none\",\n        borderRadius: 6,\n        padding: \"0.5rem 1rem\",\n        cursor: \"pointer\"\n      },\n      children: \"Restart Agent\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleAction(\"disable\"),\n      disabled: loading,\n      style: {\n        background: \"#ff5252\",\n        color: \"#fff\",\n        border: \"none\",\n        borderRadius: 6,\n        padding: \"0.5rem 1rem\",\n        cursor: \"pointer\"\n      },\n      children: \"Disable Agent\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), msg && /*#__PURE__*/_jsxDEV(\"span\", {\n      style: {\n        marginLeft: \"1rem\",\n        fontWeight: \"bold\"\n      },\n      children: msg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 15\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n_s(AdminAgentControls, \"o/Txrdww2sS93ghazmqTFHvYZaQ=\");\n_c = AdminAgentControls;\nexport default AdminAgentControls;\nvar _c;\n$RefreshReg$(_c, \"AdminAgentControls\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","AdminAgentControls","agentName","onAction","_s","loading","setLoading","msg","setMsg","handleAction","action","res","fetch","API_URL","method","headers","data","json","message","e","style","margin","children","onClick","disabled","marginRight","background","color","border","borderRadius","padding","cursor","fileName","_jsxFileName","lineNumber","columnNumber","marginLeft","fontWeight","_c","$RefreshReg$"],"sources":["/Users/isaacbuz/Documents/Projects/GoldenSignalsAI/presentation/frontend/src/AdminAgentControls.js"],"sourcesContent":["// AdminAgentControls.js\n// Purpose: Provides controls for admin users to manage agents in GoldenSignalsAI. Allows restarting or disabling agents via API calls. Displays action status and feedback messages for each operation.\n\nimport React, { useState } from \"react\";\n\nfunction AdminAgentControls({ agentName, onAction }) {\n  // State to indicate loading status for async actions\n  const [loading, setLoading] = useState(false);\n  // State for feedback message to display action results\n  const [msg, setMsg] = useState(\"\");\n\n  // Handle admin actions (restart/disable) for the agent\n  const handleAction = async (action) => {\n    setLoading(true);\n    setMsg(\"\");\n    try {\n      // Send POST request to backend API for the selected action\n      const res = await fetch(`${API_URL}/api/admin/agents/${agentName}/${action}`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n      });\n      const data = await res.json();\n      setMsg(data.message); // Show feedback message\n      if (onAction) onAction(action, data); // Notify parent if callback provided\n    } catch (e) {\n      setMsg(\"Error performing action\");\n    }\n    setLoading(false);\n  };\n\n  // Render action buttons for restart and disable, and show feedback message\n  return (\n    <div style={{ margin: \"1rem 0\" }}>\n      <button\n        onClick={() => handleAction(\"restart\")}\n        disabled={loading}\n        style={{ marginRight: \"1rem\", background: \"#4fc3a1\", color: \"#fff\", border: \"none\", borderRadius: 6, padding: \"0.5rem 1rem\", cursor: \"pointer\" }}\n      >\n        Restart Agent\n      </button>\n      <button\n        onClick={() => handleAction(\"disable\")}\n        disabled={loading}\n        style={{ background: \"#ff5252\", color: \"#fff\", border: \"none\", borderRadius: 6, padding: \"0.5rem 1rem\", cursor: \"pointer\" }}\n      >\n        Disable Agent\n      </button>\n      {/* Show feedback message if present */}\n      {msg && <span style={{ marginLeft: \"1rem\", fontWeight: \"bold\" }}>{msg}</span>}\n    </div>\n  );\n}\n\nexport default AdminAgentControls;\n"],"mappings":";;AAAA;AACA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,kBAAkBA,CAAC;EAAEC,SAAS;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EACnD;EACA,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EAC7C;EACA,MAAM,CAACS,GAAG,EAAEC,MAAM,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;;EAElC;EACA,MAAMW,YAAY,GAAG,MAAOC,MAAM,IAAK;IACrCJ,UAAU,CAAC,IAAI,CAAC;IAChBE,MAAM,CAAC,EAAE,CAAC;IACV,IAAI;MACF;MACA,MAAMG,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGC,OAAO,qBAAqBX,SAAS,IAAIQ,MAAM,EAAE,EAAE;QAC5EI,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB;MAChD,CAAC,CAAC;MACF,MAAMC,IAAI,GAAG,MAAML,GAAG,CAACM,IAAI,CAAC,CAAC;MAC7BT,MAAM,CAACQ,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC;MACtB,IAAIf,QAAQ,EAAEA,QAAQ,CAACO,MAAM,EAAEM,IAAI,CAAC,CAAC,CAAC;IACxC,CAAC,CAAC,OAAOG,CAAC,EAAE;MACVX,MAAM,CAAC,yBAAyB,CAAC;IACnC;IACAF,UAAU,CAAC,KAAK,CAAC;EACnB,CAAC;;EAED;EACA,oBACEN,OAAA;IAAKoB,KAAK,EAAE;MAAEC,MAAM,EAAE;IAAS,CAAE;IAAAC,QAAA,gBAC/BtB,OAAA;MACEuB,OAAO,EAAEA,CAAA,KAAMd,YAAY,CAAC,SAAS,CAAE;MACvCe,QAAQ,EAAEnB,OAAQ;MAClBe,KAAK,EAAE;QAAEK,WAAW,EAAE,MAAM;QAAEC,UAAU,EAAE,SAAS;QAAEC,KAAK,EAAE,MAAM;QAAEC,MAAM,EAAE,MAAM;QAAEC,YAAY,EAAE,CAAC;QAAEC,OAAO,EAAE,aAAa;QAAEC,MAAM,EAAE;MAAU,CAAE;MAAAT,QAAA,EAClJ;IAED;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACTnC,OAAA;MACEuB,OAAO,EAAEA,CAAA,KAAMd,YAAY,CAAC,SAAS,CAAE;MACvCe,QAAQ,EAAEnB,OAAQ;MAClBe,KAAK,EAAE;QAAEM,UAAU,EAAE,SAAS;QAAEC,KAAK,EAAE,MAAM;QAAEC,MAAM,EAAE,MAAM;QAAEC,YAAY,EAAE,CAAC;QAAEC,OAAO,EAAE,aAAa;QAAEC,MAAM,EAAE;MAAU,CAAE;MAAAT,QAAA,EAC7H;IAED;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAER5B,GAAG,iBAAIP,OAAA;MAAMoB,KAAK,EAAE;QAAEgB,UAAU,EAAE,MAAM;QAAEC,UAAU,EAAE;MAAO,CAAE;MAAAf,QAAA,EAAEf;IAAG;MAAAyB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1E,CAAC;AAEV;AAAC/B,EAAA,CA9CQH,kBAAkB;AAAAqC,EAAA,GAAlBrC,kBAAkB;AAgD3B,eAAeA,kBAAkB;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}