{"ast":null,"code":"// Firebase config for GoldenSignalsAI Admin Panel\n// Replace the below config with your actual Firebase project credentials\n// firebase.js\n// Purpose: Initializes and exports Firebase app and authentication providers for GoldenSignalsAI frontend. Centralizes Firebase configuration and ensures secure, maintainable integration with Firebase services.\nimport{setPersistence,browserLocalPersistence}from\"firebase/auth\";import{initializeApp}from\"firebase/app\";import{getAuth,GoogleAuthProvider,GithubAuthProvider,onIdTokenChanged,signOut}from\"firebase/auth\";// Firebase configuration object for the GoldenSignalsAI project\nconst firebaseConfig={apiKey:process.env.REACT_APP_FIREBASE_API_KEY,authDomain:process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,projectId:process.env.REACT_APP_FIREBASE_PROJECT_ID,storageBucket:process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,messagingSenderId:process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,appId:process.env.REACT_APP_FIREBASE_APP_ID,measurementId:process.env.REACT_APP_FIREBASE_MEASUREMENT_ID};// Initialize Firebase app instance\nconst app=initializeApp(firebaseConfig);// Initialize Firebase authentication instance\nconst auth=getAuth(app);const googleProvider=new GoogleAuthProvider();const githubProvider=new GithubAuthProvider();// Helper: Detect token expiry and auto-logout\n// Set session persistence to survive page reloads\nsetPersistence(auth,browserLocalPersistence);// Helper: Detect token expiry and auto-logout\nexport function setupTokenExpiryListener(onExpire){onIdTokenChanged(auth,async user=>{if(user){const token=await user.getIdTokenResult();const now=Date.now()/1000;// Only sign out if token is truly expired\nif(token.expirationTime&&now>Date.parse(token.expirationTime)/1000){signOut(auth);if(onExpire)onExpire();}}else{// If the user is not authenticated, call the onExpire callback.\nif(onExpire)onExpire();}});}// Export initialized Firebase app and authentication providers for use in the frontend\nexport{app,auth,googleProvider,githubProvider};","map":{"version":3,"names":["setPersistence","browserLocalPersistence","initializeApp","getAuth","GoogleAuthProvider","GithubAuthProvider","onIdTokenChanged","signOut","firebaseConfig","apiKey","process","env","REACT_APP_FIREBASE_API_KEY","authDomain","REACT_APP_FIREBASE_AUTH_DOMAIN","projectId","REACT_APP_FIREBASE_PROJECT_ID","storageBucket","REACT_APP_FIREBASE_STORAGE_BUCKET","messagingSenderId","REACT_APP_FIREBASE_MESSAGING_SENDER_ID","appId","REACT_APP_FIREBASE_APP_ID","measurementId","REACT_APP_FIREBASE_MEASUREMENT_ID","app","auth","googleProvider","githubProvider","setupTokenExpiryListener","onExpire","user","token","getIdTokenResult","now","Date","expirationTime","parse"],"sources":["/Users/isaacbuz/Documents/Projects/GoldenSignalsAI/presentation/frontend/src/firebase.js"],"sourcesContent":["// Firebase config for GoldenSignalsAI Admin Panel\n// Replace the below config with your actual Firebase project credentials\n// firebase.js\n// Purpose: Initializes and exports Firebase app and authentication providers for GoldenSignalsAI frontend. Centralizes Firebase configuration and ensures secure, maintainable integration with Firebase services.\n\nimport { setPersistence, browserLocalPersistence } from \"firebase/auth\";\nimport { initializeApp } from \"firebase/app\";\nimport { getAuth, GoogleAuthProvider, GithubAuthProvider, onIdTokenChanged, signOut } from \"firebase/auth\";\n\n// Firebase configuration object for the GoldenSignalsAI project\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\n  measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENT_ID,\n};\n\n// Initialize Firebase app instance\nconst app = initializeApp(firebaseConfig);\n// Initialize Firebase authentication instance\nconst auth = getAuth(app);\nconst googleProvider = new GoogleAuthProvider();\nconst githubProvider = new GithubAuthProvider();\n\n// Helper: Detect token expiry and auto-logout\n\n// Set session persistence to survive page reloads\nsetPersistence(auth, browserLocalPersistence);\n\n// Helper: Detect token expiry and auto-logout\nexport function setupTokenExpiryListener(onExpire) {\n  onIdTokenChanged(auth, async (user) => {\n    if (user) {\n      const token = await user.getIdTokenResult();\n      const now = Date.now() / 1000;\n      // Only sign out if token is truly expired\n      if (token.expirationTime && now > Date.parse(token.expirationTime) / 1000) {\n        signOut(auth);\n        if (onExpire) onExpire();\n      }\n    } else {\n      // If the user is not authenticated, call the onExpire callback.\n      if (onExpire) onExpire();\n    }\n  });\n}\n\n// Export initialized Firebase app and authentication providers for use in the frontend\nexport { app, auth, googleProvider, githubProvider };\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,OAASA,cAAc,CAAEC,uBAAuB,KAAQ,eAAe,CACvE,OAASC,aAAa,KAAQ,cAAc,CAC5C,OAASC,OAAO,CAAEC,kBAAkB,CAAEC,kBAAkB,CAAEC,gBAAgB,CAAEC,OAAO,KAAQ,eAAe,CAE1G;AACA,KAAM,CAAAC,cAAc,CAAG,CACrBC,MAAM,CAAEC,OAAO,CAACC,GAAG,CAACC,0BAA0B,CAC9CC,UAAU,CAAEH,OAAO,CAACC,GAAG,CAACG,8BAA8B,CACtDC,SAAS,CAAEL,OAAO,CAACC,GAAG,CAACK,6BAA6B,CACpDC,aAAa,CAAEP,OAAO,CAACC,GAAG,CAACO,iCAAiC,CAC5DC,iBAAiB,CAAET,OAAO,CAACC,GAAG,CAACS,sCAAsC,CACrEC,KAAK,CAAEX,OAAO,CAACC,GAAG,CAACW,yBAAyB,CAC5CC,aAAa,CAAEb,OAAO,CAACC,GAAG,CAACa,iCAC7B,CAAC,CAED;AACA,KAAM,CAAAC,GAAG,CAAGvB,aAAa,CAACM,cAAc,CAAC,CACzC;AACA,KAAM,CAAAkB,IAAI,CAAGvB,OAAO,CAACsB,GAAG,CAAC,CACzB,KAAM,CAAAE,cAAc,CAAG,GAAI,CAAAvB,kBAAkB,CAAC,CAAC,CAC/C,KAAM,CAAAwB,cAAc,CAAG,GAAI,CAAAvB,kBAAkB,CAAC,CAAC,CAE/C;AAEA;AACAL,cAAc,CAAC0B,IAAI,CAAEzB,uBAAuB,CAAC,CAE7C;AACA,MAAO,SAAS,CAAA4B,wBAAwBA,CAACC,QAAQ,CAAE,CACjDxB,gBAAgB,CAACoB,IAAI,CAAE,KAAO,CAAAK,IAAI,EAAK,CACrC,GAAIA,IAAI,CAAE,CACR,KAAM,CAAAC,KAAK,CAAG,KAAM,CAAAD,IAAI,CAACE,gBAAgB,CAAC,CAAC,CAC3C,KAAM,CAAAC,GAAG,CAAGC,IAAI,CAACD,GAAG,CAAC,CAAC,CAAG,IAAI,CAC7B;AACA,GAAIF,KAAK,CAACI,cAAc,EAAIF,GAAG,CAAGC,IAAI,CAACE,KAAK,CAACL,KAAK,CAACI,cAAc,CAAC,CAAG,IAAI,CAAE,CACzE7B,OAAO,CAACmB,IAAI,CAAC,CACb,GAAII,QAAQ,CAAEA,QAAQ,CAAC,CAAC,CAC1B,CACF,CAAC,IAAM,CACL;AACA,GAAIA,QAAQ,CAAEA,QAAQ,CAAC,CAAC,CAC1B,CACF,CAAC,CAAC,CACJ,CAEA;AACA,OAASL,GAAG,CAAEC,IAAI,CAAEC,cAAc,CAAEC,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}