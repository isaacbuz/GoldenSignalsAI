{"ast":null,"code":"// Firebase config for GoldenSignalsAI Admin Panel\n// Replace the below config with your actual Firebase project credentials\n// firebase.js\n// Purpose: Initializes and exports Firebase app and authentication providers for GoldenSignalsAI frontend. Centralizes Firebase configuration and ensures secure, maintainable integration with Firebase services.\n\nimport { setPersistence, browserLocalPersistence } from \"firebase/auth\";\nimport { initializeApp } from \"firebase/app\";\nimport { getAuth, GoogleAuthProvider, GithubAuthProvider, onIdTokenChanged, signOut } from \"firebase/auth\";\n\n// Firebase configuration object for the GoldenSignalsAI project\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\n  measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENT_ID\n};\n\n// Initialize Firebase app instance\nconst app = initializeApp(firebaseConfig);\n// Initialize Firebase authentication instance\nconst auth = getAuth(app);\nconst googleProvider = new GoogleAuthProvider();\nconst githubProvider = new GithubAuthProvider();\n\n// Helper: Detect token expiry and auto-logout\n\n// Set session persistence to survive page reloads\nsetPersistence(auth, browserLocalPersistence);\n\n// Helper: Detect token expiry and auto-logout\nexport function setupTokenExpiryListener(onExpire) {\n  onIdTokenChanged(auth, async user => {\n    if (user) {\n      const token = await user.getIdTokenResult();\n      const now = Date.now() / 1000;\n      // Only sign out if token is truly expired\n      if (token.expirationTime && now > Date.parse(token.expirationTime) / 1000) {\n        signOut(auth);\n        if (onExpire) onExpire();\n      }\n    } else {\n      // If the user is not authenticated, call the onExpire callback.\n      if (onExpire) onExpire();\n    }\n  });\n}\n\n// Export initialized Firebase app and authentication providers for use in the frontend\nexport { app, auth, googleProvider, githubProvider };","map":{"version":3,"names":["setPersistence","browserLocalPersistence","initializeApp","getAuth","GoogleAuthProvider","GithubAuthProvider","onIdTokenChanged","signOut","firebaseConfig","apiKey","process","env","REACT_APP_FIREBASE_API_KEY","authDomain","REACT_APP_FIREBASE_AUTH_DOMAIN","projectId","REACT_APP_FIREBASE_PROJECT_ID","storageBucket","REACT_APP_FIREBASE_STORAGE_BUCKET","messagingSenderId","REACT_APP_FIREBASE_MESSAGING_SENDER_ID","appId","REACT_APP_FIREBASE_APP_ID","measurementId","REACT_APP_FIREBASE_MEASUREMENT_ID","app","auth","googleProvider","githubProvider","setupTokenExpiryListener","onExpire","user","token","getIdTokenResult","now","Date","expirationTime","parse"],"sources":["/Users/isaacbuz/Documents/Projects/GoldenSignalsAI/presentation/frontend/src/firebase.js"],"sourcesContent":["// Firebase config for GoldenSignalsAI Admin Panel\n// Replace the below config with your actual Firebase project credentials\n// firebase.js\n// Purpose: Initializes and exports Firebase app and authentication providers for GoldenSignalsAI frontend. Centralizes Firebase configuration and ensures secure, maintainable integration with Firebase services.\n\nimport { setPersistence, browserLocalPersistence } from \"firebase/auth\";\nimport { initializeApp } from \"firebase/app\";\nimport { getAuth, GoogleAuthProvider, GithubAuthProvider, onIdTokenChanged, signOut } from \"firebase/auth\";\n\n// Firebase configuration object for the GoldenSignalsAI project\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\n  measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENT_ID,\n};\n\n// Initialize Firebase app instance\nconst app = initializeApp(firebaseConfig);\n// Initialize Firebase authentication instance\nconst auth = getAuth(app);\nconst googleProvider = new GoogleAuthProvider();\nconst githubProvider = new GithubAuthProvider();\n\n// Helper: Detect token expiry and auto-logout\n\n// Set session persistence to survive page reloads\nsetPersistence(auth, browserLocalPersistence);\n\n// Helper: Detect token expiry and auto-logout\nexport function setupTokenExpiryListener(onExpire) {\n  onIdTokenChanged(auth, async (user) => {\n    if (user) {\n      const token = await user.getIdTokenResult();\n      const now = Date.now() / 1000;\n      // Only sign out if token is truly expired\n      if (token.expirationTime && now > Date.parse(token.expirationTime) / 1000) {\n        signOut(auth);\n        if (onExpire) onExpire();\n      }\n    } else {\n      // If the user is not authenticated, call the onExpire callback.\n      if (onExpire) onExpire();\n    }\n  });\n}\n\n// Export initialized Firebase app and authentication providers for use in the frontend\nexport { app, auth, googleProvider, githubProvider };\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,SAASA,cAAc,EAAEC,uBAAuB,QAAQ,eAAe;AACvE,SAASC,aAAa,QAAQ,cAAc;AAC5C,SAASC,OAAO,EAAEC,kBAAkB,EAAEC,kBAAkB,EAAEC,gBAAgB,EAAEC,OAAO,QAAQ,eAAe;;AAE1G;AACA,MAAMC,cAAc,GAAG;EACrBC,MAAM,EAAEC,OAAO,CAACC,GAAG,CAACC,0BAA0B;EAC9CC,UAAU,EAAEH,OAAO,CAACC,GAAG,CAACG,8BAA8B;EACtDC,SAAS,EAAEL,OAAO,CAACC,GAAG,CAACK,6BAA6B;EACpDC,aAAa,EAAEP,OAAO,CAACC,GAAG,CAACO,iCAAiC;EAC5DC,iBAAiB,EAAET,OAAO,CAACC,GAAG,CAACS,sCAAsC;EACrEC,KAAK,EAAEX,OAAO,CAACC,GAAG,CAACW,yBAAyB;EAC5CC,aAAa,EAAEb,OAAO,CAACC,GAAG,CAACa;AAC7B,CAAC;;AAED;AACA,MAAMC,GAAG,GAAGvB,aAAa,CAACM,cAAc,CAAC;AACzC;AACA,MAAMkB,IAAI,GAAGvB,OAAO,CAACsB,GAAG,CAAC;AACzB,MAAME,cAAc,GAAG,IAAIvB,kBAAkB,CAAC,CAAC;AAC/C,MAAMwB,cAAc,GAAG,IAAIvB,kBAAkB,CAAC,CAAC;;AAE/C;;AAEA;AACAL,cAAc,CAAC0B,IAAI,EAAEzB,uBAAuB,CAAC;;AAE7C;AACA,OAAO,SAAS4B,wBAAwBA,CAACC,QAAQ,EAAE;EACjDxB,gBAAgB,CAACoB,IAAI,EAAE,MAAOK,IAAI,IAAK;IACrC,IAAIA,IAAI,EAAE;MACR,MAAMC,KAAK,GAAG,MAAMD,IAAI,CAACE,gBAAgB,CAAC,CAAC;MAC3C,MAAMC,GAAG,GAAGC,IAAI,CAACD,GAAG,CAAC,CAAC,GAAG,IAAI;MAC7B;MACA,IAAIF,KAAK,CAACI,cAAc,IAAIF,GAAG,GAAGC,IAAI,CAACE,KAAK,CAACL,KAAK,CAACI,cAAc,CAAC,GAAG,IAAI,EAAE;QACzE7B,OAAO,CAACmB,IAAI,CAAC;QACb,IAAII,QAAQ,EAAEA,QAAQ,CAAC,CAAC;MAC1B;IACF,CAAC,MAAM;MACL;MACA,IAAIA,QAAQ,EAAEA,QAAQ,CAAC,CAAC;IAC1B;EACF,CAAC,CAAC;AACJ;;AAEA;AACA,SAASL,GAAG,EAAEC,IAAI,EAAEC,cAAc,EAAEC,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}