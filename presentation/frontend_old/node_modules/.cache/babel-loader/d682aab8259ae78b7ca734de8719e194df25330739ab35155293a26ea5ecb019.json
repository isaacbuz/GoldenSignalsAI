{"ast":null,"code":"var _jsxFileName = \"/Users/isaacbuz/Documents/Projects/GoldenSignalsAI/presentation/frontend/src/AdminAgentHealth.js\",\n  _s = $RefreshSig$();\n// AdminAgentHealth.js\n// Purpose: Displays the health and heartbeat status of all agents in GoldenSignalsAI for admin users. Polls the backend for up-to-date agent health, including status, last heartbeat, latency, and error rate. Designed for real-time monitoring and troubleshooting by administrators.\n\nimport React, { useEffect, useState } from \"react\";\nimport \"./AdminPanel.css\";\n\n// Utility function to determine color based on agent status\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction statusColor(status) {\n  if (status === \"active\") return \"#6be6c1\";\n  if (status === \"inactive\") return \"#ff5252\";\n  return \"#f8b400\";\n}\nfunction AdminAgentHealth() {\n  _s();\n  // State for storing agent health data from the backend\n  const [health, setHealth] = useState({});\n  useEffect(() => {\n    // Fetch agent health once on mount\n    fetch(\"/api/admin/agents/health\").then(res => res.json()).then(setHealth);\n    // Set up polling to fetch agent health every 5 seconds\n    const interval = setInterval(() => {\n      fetch(\"/api/admin/agents/health\").then(res => res.json()).then(setHealth);\n    }, 5000); // update every 5 seconds\n    return () => clearInterval(interval);\n  }, []);\n\n  // Convert health object to array for rendering\n  const agents = Object.entries(health);\n\n  // Show loading state if no agent data yet\n  if (!agents.length) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading agent health...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 30\n  }, this);\n\n  // Render a table of agent health and heartbeat info\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"agent-health\",\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Agent Health & Heartbeat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"agent-health-table\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Agent\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Status\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Last Heartbeat\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Latency (s)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Error Rate\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: agents.map(([name, info]) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            style: {\n              color: statusColor(info.status)\n            },\n            children: info.status\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: new Date(info.last_heartbeat * 1000).toLocaleTimeString()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: info.latency\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [(info.error_rate * 100).toFixed(2), \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 15\n          }, this)]\n        }, name, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n_s(AdminAgentHealth, \"n93ljpsWvHvTCOdeNo+SRfDYZqY=\");\n_c = AdminAgentHealth;\nexport default AdminAgentHealth;\nvar _c;\n$RefreshReg$(_c, \"AdminAgentHealth\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","statusColor","status","AdminAgentHealth","_s","health","setHealth","fetch","then","res","json","interval","setInterval","clearInterval","agents","Object","entries","length","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","name","info","style","color","Date","last_heartbeat","toLocaleTimeString","latency","error_rate","toFixed","_c","$RefreshReg$"],"sources":["/Users/isaacbuz/Documents/Projects/GoldenSignalsAI/presentation/frontend/src/AdminAgentHealth.js"],"sourcesContent":["// AdminAgentHealth.js\n// Purpose: Displays the health and heartbeat status of all agents in GoldenSignalsAI for admin users. Polls the backend for up-to-date agent health, including status, last heartbeat, latency, and error rate. Designed for real-time monitoring and troubleshooting by administrators.\n\nimport React, { useEffect, useState } from \"react\";\nimport \"./AdminPanel.css\";\n\n// Utility function to determine color based on agent status\nfunction statusColor(status) {\n  if (status === \"active\") return \"#6be6c1\";\n  if (status === \"inactive\") return \"#ff5252\";\n  return \"#f8b400\";\n}\n\nfunction AdminAgentHealth() {\n  // State for storing agent health data from the backend\n  const [health, setHealth] = useState({});\n\n  useEffect(() => {\n    // Fetch agent health once on mount\n    fetch(\"/api/admin/agents/health\")\n      .then((res) => res.json())\n      .then(setHealth);\n    // Set up polling to fetch agent health every 5 seconds\n    const interval = setInterval(() => {\n      fetch(\"/api/admin/agents/health\")\n        .then((res) => res.json())\n        .then(setHealth);\n    }, 5000); // update every 5 seconds\n    return () => clearInterval(interval);\n  }, []);\n\n  // Convert health object to array for rendering\n  const agents = Object.entries(health);\n\n  // Show loading state if no agent data yet\n  if (!agents.length) return <p>Loading agent health...</p>;\n\n  // Render a table of agent health and heartbeat info\n  return (\n    <div className=\"agent-health\">\n      <h4>Agent Health & Heartbeat</h4>\n      <table className=\"agent-health-table\">\n        <thead>\n          <tr>\n            <th>Agent</th>\n            <th>Status</th>\n            <th>Last Heartbeat</th>\n            <th>Latency (s)</th>\n            <th>Error Rate</th>\n          </tr>\n        </thead>\n        <tbody>\n          {agents.map(([name, info]) => (\n            <tr key={name}>\n              <td>{name}</td>\n              {/* Status color-coded for quick visual diagnosis */}\n              <td style={{ color: statusColor(info.status) }}>{info.status}</td>\n              <td>{new Date(info.last_heartbeat * 1000).toLocaleTimeString()}</td>\n              <td>{info.latency}</td>\n              <td>{(info.error_rate * 100).toFixed(2)}%</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default AdminAgentHealth;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}