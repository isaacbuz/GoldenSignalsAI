{"ast":null,"code":"// AdminAgentHealth.js\n// Purpose: Displays the health and heartbeat status of all agents in GoldenSignalsAI for admin users. Polls the backend for up-to-date agent health, including status, last heartbeat, latency, and error rate. Designed for real-time monitoring and troubleshooting by administrators.\nimport React,{useEffect,useState}from\"react\";import\"./AdminPanel.css\";// Utility function to determine color based on agent status\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function statusColor(status){if(status===\"active\")return\"#6be6c1\";if(status===\"inactive\")return\"#ff5252\";return\"#f8b400\";}function AdminAgentHealth(){// State for storing agent health data from the backend\nconst[health,setHealth]=useState({});useEffect(()=>{// Fetch agent health once on mount\nfetch(\"/api/admin/agents/health\").then(res=>res.json()).then(setHealth);// Set up polling to fetch agent health every 5 seconds\nconst interval=setInterval(()=>{fetch(\"/api/admin/agents/health\").then(res=>res.json()).then(setHealth);},5000);// update every 5 seconds\nreturn()=>clearInterval(interval);},[]);// Convert health object to array for rendering\nconst agents=Object.entries(health);// Show loading state if no agent data yet\nif(!agents.length)return/*#__PURE__*/_jsx(\"p\",{children:\"Loading agent health...\"});// Render a table of agent health and heartbeat info\nreturn/*#__PURE__*/_jsxs(\"div\",{className:\"agent-health\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Agent Health & Heartbeat\"}),/*#__PURE__*/_jsxs(\"table\",{className:\"agent-health-table\",children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:\"Agent\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Status\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Last Heartbeat\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Latency (s)\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Error Rate\"})]})}),/*#__PURE__*/_jsx(\"tbody\",{children:agents.map(_ref=>{let[name,info]=_ref;return/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:name}),/*#__PURE__*/_jsx(\"td\",{style:{color:statusColor(info.status)},children:info.status}),/*#__PURE__*/_jsx(\"td\",{children:new Date(info.last_heartbeat*1000).toLocaleTimeString()}),/*#__PURE__*/_jsx(\"td\",{children:info.latency}),/*#__PURE__*/_jsxs(\"td\",{children:[(info.error_rate*100).toFixed(2),\"%\"]})]},name);})})]})]});}export default AdminAgentHealth;","map":{"version":3,"names":["React","useEffect","useState","jsx","_jsx","jsxs","_jsxs","statusColor","status","AdminAgentHealth","health","setHealth","fetch","then","res","json","interval","setInterval","clearInterval","agents","Object","entries","length","children","className","map","_ref","name","info","style","color","Date","last_heartbeat","toLocaleTimeString","latency","error_rate","toFixed"],"sources":["/Users/isaacbuz/Documents/Projects/GoldenSignalsAI/presentation/frontend/src/AdminAgentHealth.js"],"sourcesContent":["// AdminAgentHealth.js\n// Purpose: Displays the health and heartbeat status of all agents in GoldenSignalsAI for admin users. Polls the backend for up-to-date agent health, including status, last heartbeat, latency, and error rate. Designed for real-time monitoring and troubleshooting by administrators.\n\nimport React, { useEffect, useState } from \"react\";\nimport \"./AdminPanel.css\";\n\n// Utility function to determine color based on agent status\nfunction statusColor(status) {\n  if (status === \"active\") return \"#6be6c1\";\n  if (status === \"inactive\") return \"#ff5252\";\n  return \"#f8b400\";\n}\n\nfunction AdminAgentHealth() {\n  // State for storing agent health data from the backend\n  const [health, setHealth] = useState({});\n\n  useEffect(() => {\n    // Fetch agent health once on mount\n    fetch(\"/api/admin/agents/health\")\n      .then((res) => res.json())\n      .then(setHealth);\n    // Set up polling to fetch agent health every 5 seconds\n    const interval = setInterval(() => {\n      fetch(\"/api/admin/agents/health\")\n        .then((res) => res.json())\n        .then(setHealth);\n    }, 5000); // update every 5 seconds\n    return () => clearInterval(interval);\n  }, []);\n\n  // Convert health object to array for rendering\n  const agents = Object.entries(health);\n\n  // Show loading state if no agent data yet\n  if (!agents.length) return <p>Loading agent health...</p>;\n\n  // Render a table of agent health and heartbeat info\n  return (\n    <div className=\"agent-health\">\n      <h4>Agent Health & Heartbeat</h4>\n      <table className=\"agent-health-table\">\n        <thead>\n          <tr>\n            <th>Agent</th>\n            <th>Status</th>\n            <th>Last Heartbeat</th>\n            <th>Latency (s)</th>\n            <th>Error Rate</th>\n          </tr>\n        </thead>\n        <tbody>\n          {agents.map(([name, info]) => (\n            <tr key={name}>\n              <td>{name}</td>\n              {/* Status color-coded for quick visual diagnosis */}\n              <td style={{ color: statusColor(info.status) }}>{info.status}</td>\n              <td>{new Date(info.last_heartbeat * 1000).toLocaleTimeString()}</td>\n              <td>{info.latency}</td>\n              <td>{(info.error_rate * 100).toFixed(2)}%</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default AdminAgentHealth;\n"],"mappings":"AAAA;AACA;AAEA,MAAO,CAAAA,KAAK,EAAIC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAClD,MAAO,kBAAkB,CAEzB;AAAA,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBACA,QAAS,CAAAC,WAAWA,CAACC,MAAM,CAAE,CAC3B,GAAIA,MAAM,GAAK,QAAQ,CAAE,MAAO,SAAS,CACzC,GAAIA,MAAM,GAAK,UAAU,CAAE,MAAO,SAAS,CAC3C,MAAO,SAAS,CAClB,CAEA,QAAS,CAAAC,gBAAgBA,CAAA,CAAG,CAC1B;AACA,KAAM,CAACC,MAAM,CAAEC,SAAS,CAAC,CAAGT,QAAQ,CAAC,CAAC,CAAC,CAAC,CAExCD,SAAS,CAAC,IAAM,CACd;AACAW,KAAK,CAAC,0BAA0B,CAAC,CAC9BC,IAAI,CAAEC,GAAG,EAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACzBF,IAAI,CAACF,SAAS,CAAC,CAClB;AACA,KAAM,CAAAK,QAAQ,CAAGC,WAAW,CAAC,IAAM,CACjCL,KAAK,CAAC,0BAA0B,CAAC,CAC9BC,IAAI,CAAEC,GAAG,EAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACzBF,IAAI,CAACF,SAAS,CAAC,CACpB,CAAC,CAAE,IAAI,CAAC,CAAE;AACV,MAAO,IAAMO,aAAa,CAACF,QAAQ,CAAC,CACtC,CAAC,CAAE,EAAE,CAAC,CAEN;AACA,KAAM,CAAAG,MAAM,CAAGC,MAAM,CAACC,OAAO,CAACX,MAAM,CAAC,CAErC;AACA,GAAI,CAACS,MAAM,CAACG,MAAM,CAAE,mBAAOlB,IAAA,MAAAmB,QAAA,CAAG,yBAAuB,CAAG,CAAC,CAEzD;AACA,mBACEjB,KAAA,QAAKkB,SAAS,CAAC,cAAc,CAAAD,QAAA,eAC3BnB,IAAA,OAAAmB,QAAA,CAAI,0BAAwB,CAAI,CAAC,cACjCjB,KAAA,UAAOkB,SAAS,CAAC,oBAAoB,CAAAD,QAAA,eACnCnB,IAAA,UAAAmB,QAAA,cACEjB,KAAA,OAAAiB,QAAA,eACEnB,IAAA,OAAAmB,QAAA,CAAI,OAAK,CAAI,CAAC,cACdnB,IAAA,OAAAmB,QAAA,CAAI,QAAM,CAAI,CAAC,cACfnB,IAAA,OAAAmB,QAAA,CAAI,gBAAc,CAAI,CAAC,cACvBnB,IAAA,OAAAmB,QAAA,CAAI,aAAW,CAAI,CAAC,cACpBnB,IAAA,OAAAmB,QAAA,CAAI,YAAU,CAAI,CAAC,EACjB,CAAC,CACA,CAAC,cACRnB,IAAA,UAAAmB,QAAA,CACGJ,MAAM,CAACM,GAAG,CAACC,IAAA,MAAC,CAACC,IAAI,CAAEC,IAAI,CAAC,CAAAF,IAAA,oBACvBpB,KAAA,OAAAiB,QAAA,eACEnB,IAAA,OAAAmB,QAAA,CAAKI,IAAI,CAAK,CAAC,cAEfvB,IAAA,OAAIyB,KAAK,CAAE,CAAEC,KAAK,CAAEvB,WAAW,CAACqB,IAAI,CAACpB,MAAM,CAAE,CAAE,CAAAe,QAAA,CAAEK,IAAI,CAACpB,MAAM,CAAK,CAAC,cAClEJ,IAAA,OAAAmB,QAAA,CAAK,GAAI,CAAAQ,IAAI,CAACH,IAAI,CAACI,cAAc,CAAG,IAAI,CAAC,CAACC,kBAAkB,CAAC,CAAC,CAAK,CAAC,cACpE7B,IAAA,OAAAmB,QAAA,CAAKK,IAAI,CAACM,OAAO,CAAK,CAAC,cACvB5B,KAAA,OAAAiB,QAAA,EAAK,CAACK,IAAI,CAACO,UAAU,CAAG,GAAG,EAAEC,OAAO,CAAC,CAAC,CAAC,CAAC,GAAC,EAAI,CAAC,GANvCT,IAOL,CAAC,EACN,CAAC,CACG,CAAC,EACH,CAAC,EACL,CAAC,CAEV,CAEA,cAAe,CAAAlB,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}