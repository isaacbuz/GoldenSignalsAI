name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.10, 3.11]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Poetry
        run: |
          pip install poetry
          poetry config virtualenvs.create false
      - name: Install dependencies
        run: |
          poetry install --no-interaction --no-root
      - name: Lint (ruff)
        run: poetry run ruff .
      - name: Type check (mypy)
        run: poetry run mypy .
      - name: Run backend tests
        run: |
          poetry run pytest tests/ \
            --cov=. \
            --cov-report=xml \
            --cov-report=term-missing
      - name: Enforce coverage >=90%
        run: |
          coverage report --fail-under=90
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
      - name: Build backend Docker image
        run: docker build -t goldensignalsai-backend .

  frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: presentation/frontend
    steps:
      - uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Install dependencies
        run: npm install
      - name: Lint (eslint)
        run: npm run lint || true
      - name: Type check (tsc)
        run: npm run type-check || true
      - name: Run frontend unit/integration tests
        run: npm run test -- --coverage
      - name: Enforce frontend coverage >=90%
        run: |
          npx nyc check-coverage --lines 90 --functions 90 --branches 90 --statements 90
      - name: Run E2E tests (Cypress)
        run: npm run cy:run || true
      - name: Build frontend Docker image
        run: docker build -t goldensignalsai-frontend -f Dockerfile.frontend .

  sentry_prometheus_check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Check Sentry integration
        run: |
          echo "Sentry DSN: ${{ secrets.SENTRY_DSN }}"
      - name: Check Prometheus metrics endpoint
        run: |
          curl -f http://localhost:8000/metrics || echo "Prometheus metrics endpoint not available in CI"

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: 3.10

    - name: Install dependencies
      run: |
        pip install poetry
        poetry config virtualenvs.create false
        poetry install --no-interaction --no-root

    - name: Run linters
      run: |
        poetry run black --check .
        poetry run isort --check-only .
        poetry run flake8 .

  build:
    needs: [lint]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Build Docker Image
      run: |
        docker build -t goldensignalsai .
        docker run goldensignalsai pytest tests/

  deploy:
    needs: [build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v3
    - name: Deploy to Production
      env:
        HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        HEROKU_APP_NAME: ${{ secrets.HEROKU_APP_NAME }}
      run: |
        heroku container:login
        heroku container:push web -a $HEROKU_APP_NAME
        heroku container:release web -a $HEROKU_APP_NAME
